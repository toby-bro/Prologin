#!/usr/bin/env python3
from settings import *
from oracle import *

##########################################
# Padding Oracle Attack Proof of Concept #
##########################################

def poc(encrypted):
    block_number = len(encrypted)//BYTE_NB
    decrypted = bytes()
    # Go through each block
    for i in range(block_number, 0, -1):
        print(i, decrypted.hex())
        current_encrypted_block = encrypted[(i-1)*BYTE_NB:(i)*BYTE_NB]

        # At the first encrypted block, use the initialization vector if it is known
        if(i == 1):
            previous_encrypted_block = bytearray(IV.encode("utf-8"))
        else:
            previous_encrypted_block = encrypted[(i-2)*BYTE_NB:(i-1)*BYTE_NB]
 
        bruteforce_block = previous_encrypted_block[:]
        current_decrypted_block = bytearray(IV.encode("utf-8"))
        padding = 0

        # Go through each byte of the block
        for j in range(BYTE_NB, 0, -1):
            padding += 1
            print(i,j, padding, current_decrypted_block.hex(), bruteforce_block.hex(), current_encrypted_block.hex())
            # Bruteforce byte value
            for value in range(0,256):
                # on change un bit et on regarde si Ã§a marche maintenant
                bruteforce_block = bytearray(bruteforce_block)
                bruteforce_block[j-1] = (bruteforce_block[j-1] + 1) % 256
                joined_encrypted_block = bytes(bruteforce_block) + current_encrypted_block[:]

                # Ask the oracle
                # print('there', joined_encrypted_block.hex())
                if(oracle(joined_encrypted_block)):
                    current_decrypted_block[-padding] = bruteforce_block[-padding] ^ previous_encrypted_block[-padding] ^ padding
                    print(True, i, j, padding, value, 'jevbh :', joined_encrypted_block.hex(), 'pebh :', previous_encrypted_block.hex(), 
                          'bbh :', bruteforce_block.hex(), 'cdbh :', current_decrypted_block.hex(), 'cebh :', current_encrypted_block.hex())
                    # Prepare newly found byte values
                    for k in range(1, padding+1):
                        bruteforce_block[-k] = padding+1 ^ current_decrypted_block[-k] ^ previous_encrypted_block[-k]

                    break

        decrypted = bytes(current_decrypted_block[:]) + bytes(decrypted[:])
    print('finished :', decrypted, decrypted[:-decrypted[-1]])
    return decrypted[:-decrypted[-1]]  # Padding removal

#### Script ####

usage = """
Usage:
  python3 poracle_exploit.py <message>         decrypts and displays the message
  python3 poracle_exploit.py -o <hex code>     displays oracle answer

Cryptographic parameters can be changed in settings.py
"""

if __name__ == '__main__':
    if len(sys.argv) == 2 : #chiffrement
        if len(sys.argv[1])%16!=0:       # code size security
            print(usage)
        else:
            print("Decrypted message: ", poc(bytes.fromhex(sys.argv[1])).decode("utf-8"))
    elif len(sys.argv) == 3 and sys.argv[1] == '-o' : #oracle
        # print('here', (bytes.fromhex(sys.argv[2]).hex()))
        print(oracle(bytes.fromhex(sys.argv[2])))
    else:
        print(usage)